/*
	ISYService.m
	The implementation classes and methods for the Service web service.
	Generated by SudzC.com
*/

#import "ISYService.h"
				
#import "Soap.h"
	
#import "ISYNodeParent.h"
#import "ISYUDLink.h"
#import "ISYfolder.h"
#import "ISYUDITimeResponse.h"
#import "ISYUDIIntResponse.h"
#import "ISYEmpty.h"
#import "ISYActions.h"
#import "ISYControls.h"
#import "ISYFeatures.h"
#import "ISYLastError.h"
#import "ISYDebugOptions.h"
#import "ISYSceneProfiles.h"
#import "ISYVariables.h"
#import "ISYIDParam.h"
#import "ISYNameParam.h"
#import "ISYIDNameParam.h"
#import "ISYIDNameNodeTypeParam.h"
#import "ISYNodeParam.h"
#import "ISYMoveNodeParam.h"
#import "ISYDiscoverNodesParam.h"
#import "ISYStopNodesDiscoveryParam.h"
#import "ISYInternetAccessParam.h"
#import "ISYLinkingModeParam.h"
#import "ISYRestoreDevicesParam.h"
#import "ISYSetDebugLevelParam.h"
#import "ISYIsSubscribedParam.h"
#import "ISYCurrentSystemStatusParam.h"
#import "ISYDDNSHostParam.h"
#import "ISYBatchModeParam.h"
#import "ISYBatteryDeviceWriteModeParam.h"
#import "ISYGetVariablesParam.h"
#import "ISYSystemOptions.h"
#import "ISYControl.h"
#import "ISYconfiguration.h"
#import "ISYgroup.h"
#import "ISYUPnPSpecifications.h"
#import "ISYUPnPInfo.h"
#import "ISYProduct.h"
#import "ISYDeviceRoot.h"
#import "ISYNotificationsOptions.h"
#import "ISYDBG.h"
#import "ISYSubscription.h"
#import "ISYDDNSHost.h"
#import "ISYQueryParam.h"
#import "ISYCredentialsParam.h"
#import "ISYAddNodeParam.h"
#import "ISYNodeControllerParam.h"
#import "ISYNodeGroupParam.h"
#import "ISYRestoreDeviceParam.h"
#import "ISYSecuritySystemActionParam.h"
#import "ISYSetSceneProfileParam.h"
#import "ISYUnsubscriptionParam.h"
#import "ISYSetNodeEnabledParam.h"
#import "ISYDDNSHostAndIPParam.h"
#import "ISYGetVariableParam.h"
#import "ISYUDIDefaultResponse.h"
#import "ISYProgramOptions.h"
#import "ISYNTPOptions.h"
#import "ISYDriverError.h"
#import "ISYVariable.h"
#import "ISYReplaceDeviceParam.h"
#import "ISYSubscriptionParam.h"
#import "ISYSetVariableParam.h"
#import "ISYUDNode.h"
#import "ISYnodes.h"
#import "ISYAction.h"
#import "ISYFeature.h"
#import "ISYSystemStatus.h"
#import "ISYUDIServiceParam.h"
#import "ISYNodeHierarchyParam.h"
#import "ISYPowerInfoParam.h"
#import "ISYEvent.h"
#import "ISYnode.h"
#import "ISYSceneProfile.h"
#import "ISYDeviceSpecifications.h"
#import "ISYDateTime.h"
#import "ISYSMTPConfiguration.h"


/* Implementation of the service */
				
@implementation ISYService

	- (id) init
	{
		if(self = [super init])
		{
			self.serviceUrl = @"https://nandor:xaqw2ggg@home.ntsj.com/service";
			self.namespace = @"http://www.universal-devices.com/wsdk/isy/3.0";
			self.headers = nil;
			self.logging = NO;
		}
        
		return self;
	}
	
	- (id) initWithUsername: (NSString*) username andPassword: (NSString*) password {
		if(self = [super initWithUsername:username andPassword:password]) {
		}
		return self;
	}
	
	+ (ISYService*) service {
		return [ISYService serviceWithUsername:nil andPassword:nil];
	}
	
	+ (ISYService*) serviceWithUsername: (NSString*) username andPassword: (NSString*) password {
		return [[ISYService alloc] initWithUsername:username andPassword:password];
	}

		
	/* Returns ISYUDIDefaultResponse*.  */
	- (SoapRequest*) UDIService: (id <SoapDelegate>) handler
	{
		return [self UDIService: handler action: nil];
	}

	- (SoapRequest*) UDIService: (id) _target action: (SEL) _action
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		NSString* _envelope = [Soap createEnvelope: @"UDIService" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [ISYUDIDefaultResponse alloc]];
		[_request send];
		return _request;
	}

	/* Returns ISYconfiguration*. Returns the current configuration of ISY */
	- (SoapRequest*) GetISYConfig: (id <SoapDelegate>) handler
	{
		return [self GetISYConfig: handler action: nil];
	}

	- (SoapRequest*) GetISYConfig: (id) _target action: (SEL) _action
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		NSString* _envelope = [Soap createEnvelope: @"GetISYConfig" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [ISYconfiguration alloc]];
		[_request send];
		return _request;
	}

	/* Returns ISYnodes*. Returns the configuration of nodes, groups, scenes, and any relationship thereto */
	- (SoapRequest*) GetNodesConfig: (id <SoapDelegate>) handler
	{
		return [self GetNodesConfig: handler action: nil];
	}

	- (SoapRequest*) GetNodesConfig: (id) _target action: (SEL) _action
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		NSString* _envelope = [Soap createEnvelope: @"GetNodesConfig" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [ISYnodes alloc]];
		[_request send];
		return _request;
	}

	/* Returns ISYUDIDefaultResponse*. Adds a scene/group */
	- (SoapRequest*) AddGroup: (id <SoapDelegate>) handler
	{
		return [self AddGroup: handler action: nil];
	}

	- (SoapRequest*) AddGroup: (id) _target action: (SEL) _action
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		NSString* _envelope = [Soap createEnvelope: @"AddGroup" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [ISYUDIDefaultResponse alloc]];
		[_request send];
		return _request;
	}

	/* Returns ISYUDIDefaultResponse*. Removes a group (permanently) from configuration */
	- (SoapRequest*) RemoveGroup: (id <SoapDelegate>) handler
	{
		return [self RemoveGroup: handler action: nil];
	}

	- (SoapRequest*) RemoveGroup: (id) _target action: (SEL) _action
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		NSString* _envelope = [Soap createEnvelope: @"RemoveGroup" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [ISYUDIDefaultResponse alloc]];
		[_request send];
		return _request;
	}

	/* Returns ISYUDIDefaultResponse*. Renames a group in configuration */
	- (SoapRequest*) RenameGroup: (id <SoapDelegate>) handler
	{
		return [self RenameGroup: handler action: nil];
	}

	- (SoapRequest*) RenameGroup: (id) _target action: (SEL) _action
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		NSString* _envelope = [Soap createEnvelope: @"RenameGroup" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [ISYUDIDefaultResponse alloc]];
		[_request send];
		return _request;
	}

	/* Returns ISYUDIDefaultResponse*. Adds a folder */
	- (SoapRequest*) AddFolder: (id <SoapDelegate>) handler
	{
		return [self AddFolder: handler action: nil];
	}

	- (SoapRequest*) AddFolder: (id) _target action: (SEL) _action
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		NSString* _envelope = [Soap createEnvelope: @"AddFolder" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [ISYUDIDefaultResponse alloc]];
		[_request send];
		return _request;
	}

	/* Returns ISYUDIDefaultResponse*. Removes a folder (permanently) from configuration */
	- (SoapRequest*) RemoveFolder: (id <SoapDelegate>) handler
	{
		return [self RemoveFolder: handler action: nil];
	}

	- (SoapRequest*) RemoveFolder: (id) _target action: (SEL) _action
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		NSString* _envelope = [Soap createEnvelope: @"RemoveFolder" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [ISYUDIDefaultResponse alloc]];
		[_request send];
		return _request;
	}

	/* Returns ISYUDIDefaultResponse*. Renames a folder in configuration */
	- (SoapRequest*) RenameFolder: (id <SoapDelegate>) handler
	{
		return [self RenameFolder: handler action: nil];
	}

	- (SoapRequest*) RenameFolder: (id) _target action: (SEL) _action
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		NSString* _envelope = [Soap createEnvelope: @"RenameFolder" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [ISYUDIDefaultResponse alloc]];
		[_request send];
		return _request;
	}

	/* Returns ISYUDIDefaultResponse*. Adds a predefined node for a device with a given address */
	- (SoapRequest*) AddNode: (id <SoapDelegate>) handler
	{
		return [self AddNode: handler action: nil];
	}

	- (SoapRequest*) AddNode: (id) _target action: (SEL) _action
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		NSString* _envelope = [Soap createEnvelope: @"AddNode" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [ISYUDIDefaultResponse alloc]];
		[_request send];
		return _request;
	}

	/* Returns ISYUDIDefaultResponse*. Removes a node (permanently) from configuration */
	- (SoapRequest*) RemoveNode: (id <SoapDelegate>) handler
	{
		return [self RemoveNode: handler action: nil];
	}

	- (SoapRequest*) RemoveNode: (id) _target action: (SEL) _action
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		NSString* _envelope = [Soap createEnvelope: @"RemoveNode" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [ISYUDIDefaultResponse alloc]];
		[_request send];
		return _request;
	}

	/* Returns ISYUDIDefaultResponse*. Renames a node in configuration */
	- (SoapRequest*) RenameNode: (id <SoapDelegate>) handler
	{
		return [self RenameNode: handler action: nil];
	}

	- (SoapRequest*) RenameNode: (id) _target action: (SEL) _action
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		NSString* _envelope = [Soap createEnvelope: @"RenameNode" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [ISYUDIDefaultResponse alloc]];
		[_request send];
		return _request;
	}

	/* Returns ISYUDIDefaultResponse*. Moves a node into a group/scene */
	- (SoapRequest*) MoveNode: (id <SoapDelegate>) handler
	{
		return [self MoveNode: handler action: nil];
	}

	- (SoapRequest*) MoveNode: (id) _target action: (SEL) _action
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		NSString* _envelope = [Soap createEnvelope: @"MoveNode" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [ISYUDIDefaultResponse alloc]];
		[_request send];
		return _request;
	}

	/* Returns ISYUDIDefaultResponse*. Removes a Node from a Group */
	- (SoapRequest*) RemoveFromGroup: (id <SoapDelegate>) handler
	{
		return [self RemoveFromGroup: handler action: nil];
	}

	- (SoapRequest*) RemoveFromGroup: (id) _target action: (SEL) _action
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		NSString* _envelope = [Soap createEnvelope: @"RemoveFromGroup" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [ISYUDIDefaultResponse alloc]];
		[_request send];
		return _request;
	}

	/* Returns ISYUDIDefaultResponse*. Renames the Network name */
	- (SoapRequest*) RenameNetwork: (id <SoapDelegate>) handler
	{
		return [self RenameNetwork: handler action: nil];
	}

	- (SoapRequest*) RenameNetwork: (id) _target action: (SEL) _action
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		NSString* _envelope = [Soap createEnvelope: @"RenameNetwork" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [ISYUDIDefaultResponse alloc]];
		[_request send];
		return _request;
	}

	/* Returns ISYUDIDefaultResponse*. Queries a node, a scene, or even the whole network */
	- (SoapRequest*) Query: (id <SoapDelegate>) handler
	{
		return [self Query: handler action: nil];
	}

	- (SoapRequest*) Query: (id) _target action: (SEL) _action
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		NSString* _envelope = [Soap createEnvelope: @"Query" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [ISYUDIDefaultResponse alloc]];
		[_request send];
		return _request;
	}

	/* Returns ISYUDIDefaultResponse*. Changes the way ISY discovers nodes/devices ISY as a controller or ISY as a responder */
	- (SoapRequest*) SetLinkingMode: (id <SoapDelegate>) handler
	{
		return [self SetLinkingMode: handler action: nil];
	}

	- (SoapRequest*) SetLinkingMode: (id) _target action: (SEL) _action
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		NSString* _envelope = [Soap createEnvelope: @"SetLinkingMode" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [ISYUDIDefaultResponse alloc]];
		[_request send];
		return _request;
	}

	/* Returns ISYUDIDefaultResponse*. Puts ISY in discovery (linking) mode Optionally, provide the type of device to look for */
	- (SoapRequest*) StartNodesDiscovery: (id <SoapDelegate>) handler
	{
		return [self StartNodesDiscovery: handler action: nil];
	}

	- (SoapRequest*) StartNodesDiscovery: (id) _target action: (SEL) _action
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		NSString* _envelope = [Soap createEnvelope: @"StartNodesDiscovery" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [ISYUDIDefaultResponse alloc]];
		[_request send];
		return _request;
	}

	/* Returns ISYUDIDefaultResponse*. The flag decides the operations (reset, crawl, spider) to be performed after device(s) are discovered */
	- (SoapRequest*) StopNodesDiscovery: (id <SoapDelegate>) handler
	{
		return [self StopNodesDiscovery: handler action: nil];
	}

	- (SoapRequest*) StopNodesDiscovery: (id) _target action: (SEL) _action
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		NSString* _envelope = [Soap createEnvelope: @"StopNodesDiscovery" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [ISYUDIDefaultResponse alloc]];
		[_request send];
		return _request;
	}

	/* Returns ISYUDIDefaultResponse*. Enables/Disables port forwarding to ISY on UPnP enabled routers. This process might take a long time and, as such, one must take caution with TCP connect timeouts */
	- (SoapRequest*) InternetAccess: (id <SoapDelegate>) handler
	{
		return [self InternetAccess: handler action: nil];
	}

	- (SoapRequest*) InternetAccess: (id) _target action: (SEL) _action
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		NSString* _envelope = [Soap createEnvelope: @"InternetAccess" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [ISYUDIDefaultResponse alloc]];
		[_request send];
		return _request;
	}

	/* Returns ISYSystemStatus*. Returns the current state of ISY */
	- (SoapRequest*) GetSystemStatus: (id <SoapDelegate>) handler
	{
		return [self GetSystemStatus: handler action: nil];
	}

	- (SoapRequest*) GetSystemStatus: (id) _target action: (SEL) _action
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		NSString* _envelope = [Soap createEnvelope: @"GetSystemStatus" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [ISYSystemStatus alloc]];
		[_request send];
		return _request;
	}

	/* Returns ISYDateTime*. Returns the current state of ISY */
	- (SoapRequest*) GetSystemDateTime: (id <SoapDelegate>) handler
	{
		return [self GetSystemDateTime: handler action: nil];
	}

	- (SoapRequest*) GetSystemDateTime: (id) _target action: (SEL) _action
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		NSString* _envelope = [Soap createEnvelope: @"GetSystemDateTime" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [ISYDateTime alloc]];
		[_request send];
		return _request;
	}

	/* Returns ISYUDIDefaultResponse*. Returns the current state of ISY */
	- (SoapRequest*) SetSystemDateTime: (id <SoapDelegate>) handler
	{
		return [self SetSystemDateTime: handler action: nil];
	}

	- (SoapRequest*) SetSystemDateTime: (id) _target action: (SEL) _action
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		NSString* _envelope = [Soap createEnvelope: @"SetSystemDateTime" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [ISYUDIDefaultResponse alloc]];
		[_request send];
		return _request;
	}

	/* Returns ISYSystemOptions*. Returns the options by which ISY is configured */
	- (SoapRequest*) GetSystemOptions: (id <SoapDelegate>) handler
	{
		return [self GetSystemOptions: handler action: nil];
	}

	- (SoapRequest*) GetSystemOptions: (id) _target action: (SEL) _action
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		NSString* _envelope = [Soap createEnvelope: @"GetSystemOptions" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [ISYSystemOptions alloc]];
		[_request send];
		return _request;
	}

	/* Returns ISYSMTPConfiguration*. Returns the SMTP Options configured in ISY */
	- (SoapRequest*) GetSMTPConfig: (id <SoapDelegate>) handler
	{
		return [self GetSMTPConfig: handler action: nil];
	}

	- (SoapRequest*) GetSMTPConfig: (id) _target action: (SEL) _action
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		NSString* _envelope = [Soap createEnvelope: @"GetSMTPConfig" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [ISYSMTPConfiguration alloc]];
		[_request send];
		return _request;
	}

	/* Returns ISYUDIDefaultResponse*. Sets SMTP Configuration Parameters */
	- (SoapRequest*) SetSMTPConfig: (id <SoapDelegate>) handler
	{
		return [self SetSMTPConfig: handler action: nil];
	}

	- (SoapRequest*) SetSMTPConfig: (id) _target action: (SEL) _action
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		NSString* _envelope = [Soap createEnvelope: @"SetSMTPConfig" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [ISYUDIDefaultResponse alloc]];
		[_request send];
		return _request;
	}

	/* Returns ISYUDIDefaultResponse*. Sets Notifications Options */
	- (SoapRequest*) SetNotificationsOptions: (id <SoapDelegate>) handler
	{
		return [self SetNotificationsOptions: handler action: nil];
	}

	- (SoapRequest*) SetNotificationsOptions: (id) _target action: (SEL) _action
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		NSString* _envelope = [Soap createEnvelope: @"SetNotificationsOptions" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [ISYUDIDefaultResponse alloc]];
		[_request send];
		return _request;
	}

	/* Returns ISYUDIDefaultResponse*. Sets Program Options */
	- (SoapRequest*) SetProgramOptions: (id <SoapDelegate>) handler
	{
		return [self SetProgramOptions: handler action: nil];
	}

	- (SoapRequest*) SetProgramOptions: (id) _target action: (SEL) _action
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		NSString* _envelope = [Soap createEnvelope: @"SetProgramOptions" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [ISYUDIDefaultResponse alloc]];
		[_request send];
		return _request;
	}

	/* Returns ISYUDIDefaultResponse*. Sets NTP Options */
	- (SoapRequest*) SetNTPOptions: (id <SoapDelegate>) handler
	{
		return [self SetNTPOptions: handler action: nil];
	}

	- (SoapRequest*) SetNTPOptions: (id) _target action: (SEL) _action
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		NSString* _envelope = [Soap createEnvelope: @"SetNTPOptions" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [ISYUDIDefaultResponse alloc]];
		[_request send];
		return _request;
	}

	/* Returns ISYUDIDefaultResponse*. Adjusts the clock to NTS */
	- (SoapRequest*) SynchWithNTS: (id <SoapDelegate>) handler
	{
		return [self SynchWithNTS: handler action: nil];
	}

	- (SoapRequest*) SynchWithNTS: (id) _target action: (SEL) _action
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		NSString* _envelope = [Soap createEnvelope: @"SynchWithNTS" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [ISYUDIDefaultResponse alloc]];
		[_request send];
		return _request;
	}

	/* Returns ISYUDIDefaultResponse*. Reboots the system */
	- (SoapRequest*) Reboot: (id <SoapDelegate>) handler
	{
		return [self Reboot: handler action: nil];
	}

	- (SoapRequest*) Reboot: (id) _target action: (SEL) _action
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		NSString* _envelope = [Soap createEnvelope: @"Reboot" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [ISYUDIDefaultResponse alloc]];
		[_request send];
		return _request;
	}

	/* Returns ISYUDIDefaultResponse*. Changes the userid and password for a user */
	- (SoapRequest*) SetUserCredentials: (id <SoapDelegate>) handler
	{
		return [self SetUserCredentials: handler action: nil];
	}

	- (SoapRequest*) SetUserCredentials: (id) _target action: (SEL) _action
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		NSString* _envelope = [Soap createEnvelope: @"SetUserCredentials" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [ISYUDIDefaultResponse alloc]];
		[_request send];
		return _request;
	}

	/* Returns ISYUDIDefaultResponse*. Restores devices from the configuration in ISY */
	- (SoapRequest*) RestoreDevices: (id <SoapDelegate>) handler
	{
		return [self RestoreDevices: handler action: nil];
	}

	- (SoapRequest*) RestoreDevices: (id) _target action: (SEL) _action
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		NSString* _envelope = [Soap createEnvelope: @"RestoreDevices" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [ISYUDIDefaultResponse alloc]];
		[_request send];
		return _request;
	}

	/* Returns ISYUDIDefaultResponse*. Restores a specific device from the configuration in ISY */
	- (SoapRequest*) RestoreDevice: (id <SoapDelegate>) handler
	{
		return [self RestoreDevice: handler action: nil];
	}

	- (SoapRequest*) RestoreDevice: (id) _target action: (SEL) _action
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		NSString* _envelope = [Soap createEnvelope: @"RestoreDevice" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [ISYUDIDefaultResponse alloc]];
		[_request send];
		return _request;
	}

	/* Returns ISYUDIDefaultResponse*. Replaces the modem attached to ISY and reconfigures devices if necessary */
	- (SoapRequest*) ReplaceModem: (id <SoapDelegate>) handler
	{
		return [self ReplaceModem: handler action: nil];
	}

	- (SoapRequest*) ReplaceModem: (id) _target action: (SEL) _action
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		NSString* _envelope = [Soap createEnvelope: @"ReplaceModem" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [ISYUDIDefaultResponse alloc]];
		[_request send];
		return _request;
	}

	/* Returns ISYUDIDefaultResponse*. Replaces the modem attached to ISY and reconfigures devices if necessary */
	- (SoapRequest*) RemoveModem: (id <SoapDelegate>) handler
	{
		return [self RemoveModem: handler action: nil];
	}

	- (SoapRequest*) RemoveModem: (id) _target action: (SEL) _action
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		NSString* _envelope = [Soap createEnvelope: @"RemoveModem" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [ISYUDIDefaultResponse alloc]];
		[_request send];
		return _request;
	}

	/* Returns ISYUDIDefaultResponse*. Replaces one device with another (swap) */
	- (SoapRequest*) ReplaceDevice: (id <SoapDelegate>) handler
	{
		return [self ReplaceDevice: handler action: nil];
	}

	- (SoapRequest*) ReplaceDevice: (id) _target action: (SEL) _action
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		NSString* _envelope = [Soap createEnvelope: @"ReplaceDevice" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [ISYUDIDefaultResponse alloc]];
		[_request send];
		return _request;
	}

	/* Returns ISYUDIDefaultResponse*. Arm/disarm a security system */
	- (SoapRequest*) SecuritySystemAction: (id <SoapDelegate>) handler
	{
		return [self SecuritySystemAction: handler action: nil];
	}

	- (SoapRequest*) SecuritySystemAction: (id) _target action: (SEL) _action
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		NSString* _envelope = [Soap createEnvelope: @"SecuritySystemAction" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [ISYUDIDefaultResponse alloc]];
		[_request send];
		return _request;
	}

	/* Returns ISYDBG*. Gets the debug options and current level */
	- (SoapRequest*) GetDebugLevel: (id <SoapDelegate>) handler
	{
		return [self GetDebugLevel: handler action: nil];
	}

	- (SoapRequest*) GetDebugLevel: (id) _target action: (SEL) _action
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		NSString* _envelope = [Soap createEnvelope: @"GetDebugLevel" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [ISYDBG alloc]];
		[_request send];
		return _request;
	}

	/* Returns ISYUDIDefaultResponse*. Gets the debug options and current level */
	- (SoapRequest*) SetDebugLevel: (id <SoapDelegate>) handler
	{
		return [self SetDebugLevel: handler action: nil];
	}

	- (SoapRequest*) SetDebugLevel: (id) _target action: (SEL) _action
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		NSString* _envelope = [Soap createEnvelope: @"SetDebugLevel" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [ISYUDIDefaultResponse alloc]];
		[_request send];
		return _request;
	}

	/* Returns NSMutableArray*. 
				Gets the profile attributes for responders.
				Set the controller element to scene's address and:
				In case this is an ISY scene, set the node element to "none."
				In case this is a controller for a scene, set the node element to the controller's address
			 */
	- (SoapRequest*) GetSceneProfiles: (id <SoapDelegate>) handler
	{
		return [self GetSceneProfiles: handler action: nil];
	}

	- (SoapRequest*) GetSceneProfiles: (id) _target action: (SEL) _action
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		NSString* _envelope = [Soap createEnvelope: @"GetSceneProfiles" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [ISYSceneProfile alloc]];
		[_request send];
		return _request;
	}

	/* Returns ISYUDIDefaultResponse*. 
				Sets the profile attribute for responders.
				Set the controller element to scene's address and:
				In case this is an ISY scene, set the node element to "none"
				In case this is a controller for a scene, set the node element to the responder's address
			 */
	- (SoapRequest*) SetSceneProfile: (id <SoapDelegate>) handler
	{
		return [self SetSceneProfile: handler action: nil];
	}

	- (SoapRequest*) SetSceneProfile: (id) _target action: (SEL) _action
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		NSString* _envelope = [Soap createEnvelope: @"SetSceneProfile" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [ISYUDIDefaultResponse alloc]];
		[_request send];
		return _request;
	}

	/* Returns ISYSubscription*. 
				reportURL: To reuse the socket, use REUSE_SOCKET as the value
				duration: use infinite
			 */
	- (SoapRequest*) Subscribe: (id <SoapDelegate>) handler
	{
		return [self Subscribe: handler action: nil];
	}

	- (SoapRequest*) Subscribe: (id) _target action: (SEL) _action
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		NSString* _envelope = [Soap createEnvelope: @"Subscribe" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [ISYSubscription alloc]];
		[_request send];
		return _request;
	}

	/* Returns ISYUDIDefaultResponse*. Unsubscribe from ISY */
	- (SoapRequest*) Unsubscribe: (id <SoapDelegate>) handler
	{
		return [self Unsubscribe: handler action: nil];
	}

	- (SoapRequest*) Unsubscribe: (id) _target action: (SEL) _action
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		NSString* _envelope = [Soap createEnvelope: @"Unsubscribe" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [ISYUDIDefaultResponse alloc]];
		[_request send];
		return _request;
	}

	/* Returns ISYUDIIntResponse*. 
				Whether or not the client still holds a subscription to ISY; 
				0 - Not subscribed
				1 - Subscribed
			 */
	- (SoapRequest*) IsSubscribed: (id <SoapDelegate>) handler
	{
		return [self IsSubscribed: handler action: nil];
	}

	- (SoapRequest*) IsSubscribed: (id) _target action: (SEL) _action
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		NSString* _envelope = [Soap createEnvelope: @"IsSubscribed" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [ISYUDIIntResponse alloc]];
		[_request send];
		return _request;
	}

	/* Returns ISYUDIDefaultResponse*. Sends the current system status (whole) to the given subscriber */
	- (SoapRequest*) GetCurrentSystemStatus: (id <SoapDelegate>) handler
	{
		return [self GetCurrentSystemStatus: handler action: nil];
	}

	- (SoapRequest*) GetCurrentSystemStatus: (id) _target action: (SEL) _action
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		NSString* _envelope = [Soap createEnvelope: @"GetCurrentSystemStatus" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [ISYUDIDefaultResponse alloc]];
		[_request send];
		return _request;
	}

	/* Returns ISYUDIDefaultResponse*. Sends a test email. This is used to check SMTP settings. */
	- (SoapRequest*) SendTestEmail: (id <SoapDelegate>) handler
	{
		return [self SendTestEmail: handler action: nil];
	}

	- (SoapRequest*) SendTestEmail: (id) _target action: (SEL) _action
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		NSString* _envelope = [Soap createEnvelope: @"SendTestEmail" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [ISYUDIDefaultResponse alloc]];
		[_request send];
		return _request;
	}

	/* Returns ISYUDIDefaultResponse*. Clears the list of recent errors in ISY */
	- (SoapRequest*) ClearLastError: (id <SoapDelegate>) handler
	{
		return [self ClearLastError: handler action: nil];
	}

	- (SoapRequest*) ClearLastError: (id) _target action: (SEL) _action
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		NSString* _envelope = [Soap createEnvelope: @"ClearLastError" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [ISYUDIDefaultResponse alloc]];
		[_request send];
		return _request;
	}

	/* Returns NSMutableArray*. Gets the list of recent errors in ISY */
	- (SoapRequest*) GetLastError: (id <SoapDelegate>) handler
	{
		return [self GetLastError: handler action: nil];
	}

	- (SoapRequest*) GetLastError: (id) _target action: (SEL) _action
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		NSString* _envelope = [Soap createEnvelope: @"GetLastError" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [ISYDriverError alloc]];
		[_request send];
		return _request;
	}

	/* Returns ISYUDIDefaultResponse*. Enables or disables a node */
	- (SoapRequest*) SetNodeEnabled: (id <SoapDelegate>) handler
	{
		return [self SetNodeEnabled: handler action: nil];
	}

	- (SoapRequest*) SetNodeEnabled: (id) _target action: (SEL) _action
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		NSString* _envelope = [Soap createEnvelope: @"SetNodeEnabled" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [ISYUDIDefaultResponse alloc]];
		[_request send];
		return _request;
	}

	/* Returns ISYUDIDefaultResponse*. Sets a parent for a node */
	- (SoapRequest*) SetParent: (id <SoapDelegate>) handler
	{
		return [self SetParent: handler action: nil];
	}

	- (SoapRequest*) SetParent: (id) _target action: (SEL) _action
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		NSString* _envelope = [Soap createEnvelope: @"SetParent" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [ISYUDIDefaultResponse alloc]];
		[_request send];
		return _request;
	}

	/* Returns ISYUDIDefaultResponse*. Whether or not a DDNS Host is available */
	- (SoapRequest*) IsDDNSHostAvail: (id <SoapDelegate>) handler
	{
		return [self IsDDNSHostAvail: handler action: nil];
	}

	- (SoapRequest*) IsDDNSHostAvail: (id) _target action: (SEL) _action
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		NSString* _envelope = [Soap createEnvelope: @"IsDDNSHostAvail" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [ISYUDIDefaultResponse alloc]];
		[_request send];
		return _request;
	}

	/* Returns ISYDDNSHost*. Returns the currently configured DDNS host */
	- (SoapRequest*) GetDDNSHost: (id <SoapDelegate>) handler
	{
		return [self GetDDNSHost: handler action: nil];
	}

	- (SoapRequest*) GetDDNSHost: (id) _target action: (SEL) _action
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		NSString* _envelope = [Soap createEnvelope: @"GetDDNSHost" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [ISYDDNSHost alloc]];
		[_request send];
		return _request;
	}

	/* Returns ISYUDIDefaultResponse*. Registers and DDNS host with the associated IP */
	- (SoapRequest*) AddDDNSHost: (id <SoapDelegate>) handler
	{
		return [self AddDDNSHost: handler action: nil];
	}

	- (SoapRequest*) AddDDNSHost: (id) _target action: (SEL) _action
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		NSString* _envelope = [Soap createEnvelope: @"AddDDNSHost" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [ISYUDIDefaultResponse alloc]];
		[_request send];
		return _request;
	}

	/* Returns ISYUDIDefaultResponse*. Removes the registered DDNS host. Must use GetDDNSHost */
	- (SoapRequest*) RemoveDDNSHost: (id <SoapDelegate>) handler
	{
		return [self RemoveDDNSHost: handler action: nil];
	}

	- (SoapRequest*) RemoveDDNSHost: (id) _target action: (SEL) _action
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		NSString* _envelope = [Soap createEnvelope: @"RemoveDDNSHost" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [ISYUDIDefaultResponse alloc]];
		[_request send];
		return _request;
	}

	/* Returns ISYUDIDefaultResponse*. Causes device updates to be written to the given node */
	- (SoapRequest*) WriteDeviceUpdates: (id <SoapDelegate>) handler
	{
		return [self WriteDeviceUpdates: handler action: nil];
	}

	- (SoapRequest*) WriteDeviceUpdates: (id) _target action: (SEL) _action
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		NSString* _envelope = [Soap createEnvelope: @"WriteDeviceUpdates" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [ISYUDIDefaultResponse alloc]];
		[_request send];
		return _request;
	}

	/* Returns ISYUDIDefaultResponse*. Causes the system to go to/exit batch mode  */
	- (SoapRequest*) SetBatchMode: (id <SoapDelegate>) handler
	{
		return [self SetBatchMode: handler action: nil];
	}

	- (SoapRequest*) SetBatchMode: (id) _target action: (SEL) _action
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		NSString* _envelope = [Soap createEnvelope: @"SetBatchMode" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [ISYUDIDefaultResponse alloc]];
		[_request send];
		return _request;
	}

	/* Returns ISYUDIDefaultResponse*. Enables/disables writing to battery devices automatically */
	- (SoapRequest*) SetBatteryDeviceWriteMode: (id <SoapDelegate>) handler
	{
		return [self SetBatteryDeviceWriteMode: handler action: nil];
	}

	- (SoapRequest*) SetBatteryDeviceWriteMode: (id) _target action: (SEL) _action
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		NSString* _envelope = [Soap createEnvelope: @"SetBatteryDeviceWriteMode" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [ISYUDIDefaultResponse alloc]];
		[_request send];
		return _request;
	}

	/* Returns ISYUDIDefaultResponse*. Sets the Power characteristics for a node */
	- (SoapRequest*) SetNodePowerInfo: (id <SoapDelegate>) handler
	{
		return [self SetNodePowerInfo: handler action: nil];
	}

	- (SoapRequest*) SetNodePowerInfo: (id) _target action: (SEL) _action
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		NSString* _envelope = [Soap createEnvelope: @"SetNodePowerInfo" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [ISYUDIDefaultResponse alloc]];
		[_request send];
		return _request;
	}

	/* Returns ISYUDITimeResponse*. Returns a timestamp of when ISY was last started */
	- (SoapRequest*) GetStartupTime: (id <SoapDelegate>) handler
	{
		return [self GetStartupTime: handler action: nil];
	}

	- (SoapRequest*) GetStartupTime: (id) _target action: (SEL) _action
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		NSString* _envelope = [Soap createEnvelope: @"GetStartupTime" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [ISYUDITimeResponse alloc]];
		[_request send];
		return _request;
	}

	/* Returns ISYUDIDefaultResponse*. Immediately sends a heartbeat message to all subscribers */
	- (SoapRequest*) SendHeartbeat: (id <SoapDelegate>) handler
	{
		return [self SendHeartbeat: handler action: nil];
	}

	- (SoapRequest*) SendHeartbeat: (id) _target action: (SEL) _action
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		NSString* _envelope = [Soap createEnvelope: @"SendHeartbeat" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [ISYUDIDefaultResponse alloc]];
		[_request send];
		return _request;
	}

	/* Returns ISYUDIDefaultResponse*. Sets a variable to the desired value */
	- (SoapRequest*) SetVariable: (id <SoapDelegate>) handler
	{
		return [self SetVariable: handler action: nil];
	}

	- (SoapRequest*) SetVariable: (id) _target action: (SEL) _action
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		NSString* _envelope = [Soap createEnvelope: @"SetVariable" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [ISYUDIDefaultResponse alloc]];
		[_request send];
		return _request;
	}

	/* Returns ISYVariable*. Retrieves a variable */
	- (SoapRequest*) GetVariable: (id <SoapDelegate>) handler
	{
		return [self GetVariable: handler action: nil];
	}

	- (SoapRequest*) GetVariable: (id) _target action: (SEL) _action
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		NSString* _envelope = [Soap createEnvelope: @"GetVariable" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [ISYVariable alloc]];
		[_request send];
		return _request;
	}

	/* Returns NSMutableArray*. Retrieves all variables of a certain type */
	- (SoapRequest*) GetVariables: (id <SoapDelegate>) handler
	{
		return [self GetVariables: handler action: nil];
	}

	- (SoapRequest*) GetVariables: (id) _target action: (SEL) _action
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		NSString* _envelope = [Soap createEnvelope: @"GetVariables" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [ISYVariable alloc]];
		[_request send];
		return _request;
	}


@end
	